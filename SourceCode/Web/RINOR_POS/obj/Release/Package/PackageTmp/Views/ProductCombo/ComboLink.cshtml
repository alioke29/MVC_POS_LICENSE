@model RINOR_POS.Models.productComboViewModel

@{
    ViewBag.Title = "Product Combo Link";
}

<div id="content">
    <div class="row">
        <div class="col-xs-12 col-sm-9 col-md-9 col-lg-9">
            <h1 class="page-title txt-color-blueDark">

                <!-- PAGE HEADER -->
                <i class="fa-fw fa fa-pencil-square-o"></i>
                Product Combo
                <span>
                    >
                    Link
                </span>
            </h1>
        </div>
    </div>

    <section id="widget-grid" class="">
        <div class="row">
            <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="jarviswidget" id="wid-id-3" data-widget-editbutton="false" data-widget-custombutton="false" data-widget-togglebutton="false" data-widget-collapsed="false">
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>
                        <h2>Product Combo Link</h2>
                    </header>
                    <!-- widget div-->
                    <div>

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body no-padding">

                            @using (Html.BeginForm("ComboLink", "ProductCombo", FormMethod.Post, htmlAttributes: new { @class = "smart-form", enctype = "multipart/form-data" }))
                            {
                                <fieldset style="align-items:flex-end">
                                    <a class="btn btn-default btn-sm pull-right header-btn hidden-mobile" href="@Url.Action("Index", "ProductCombo", new { id = Model.ProductGroupID }, Request.Url.Scheme)"><i class='fa fa-arrow-circle-left'></i> Back</a>
                                </fieldset>
                                <fieldset>
                                    @Html.AntiForgeryToken()
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.ProductComboID, new { @id = "ProductComboID" })
                                    @Html.HiddenFor(model => model.ProductGroupID, new { @id = "ProductGroupID" })

                                    <section>
                                        <div class="row">
                                            <div class="col-md-1">
                                            </div>
                                            <div class="col-md-2">
                                                @Html.LabelFor(model => model.ShopID, htmlAttributes: new { @class = "control-label" })
                                            </div>
                                            <div class="col-lg-8">
                                                <label class="input">
                                                    @Html.EditorFor(model => model.ShopName, new { htmlAttributes = new { @class = "form-control col-lg-6", placeholder = "Shop Name", @readonly = "true" } })
                                                    @Html.ValidationMessageFor(model => model.ShopName, "", new { @class = "text-danger" })
                                                </label>
                                            </div>
                                        </div>
                                    </section>
                                    <section>
                                        <div class="row">
                                            <div class="col-md-1">
                                            </div>
                                            <div class="col-md-2">
                                                @Html.LabelFor(model => model.ProductGroupID, htmlAttributes: new { @class = "control-label" })
                                            </div>
                                            <div class="col-lg-8">
                                                <label class="input">
                                                    @Html.EditorFor(model => model.ProductGroupName, new { htmlAttributes = new { @class = "form-control col-lg-6", placeholder = "Product Group", @readonly = "true" } })
                                                    @Html.ValidationMessageFor(model => model.ProductGroupName, "", new { @class = "text-danger" })
                                                </label>
                                            </div>
                                        </div>
                                    </section>
                                    <section>
                                        <div class="row">
                                            <div class="col-md-1">
                                            </div>
                                            <div class="col-md-2">
                                                @Html.LabelRequiredFor(model => model.ProductComboName, htmlAttributes: new { @class = "control-label" })
                                            </div>
                                            <div class="col-lg-8">
                                                <label class="input">
                                                    @Html.EditorFor(model => model.ProductComboName, new { htmlAttributes = new { @class = "form-control col-lg-6", placeholder = "Product Combo Name", @readonly = "true" } })
                                                    @Html.ValidationMessageFor(model => model.ProductComboName, "", new { @class = "text-danger" })
                                                </label>
                                            </div>
                                        </div>
                                    </section>
                                    <section>
                                        <div class="row">
                                            <div class="col-md-1">
                                            </div>
                                            <div class="col-md-2">
                                                @Html.LabelRequiredFor(model => model.ProductDeptID, htmlAttributes: new { @class = "control-label" })
                                            </div>
                                            <div class="col-lg-8">
                                                <label class="input">
                                                    @Html.DropDownListFor(model => model.ProductDeptID, new SelectList(Model.ProductDeptList, "ProductDeptID", "ProductDeptName"), "- Select Product Dept -", htmlAttributes: new { @id = "ddlDept", @class = "form-control select2", @onChange = "GetProductList(this.value)" })
                                                    @Html.ValidationMessageFor(model => model.ProductDeptID, "", new { @class = "text-danger" })
                                                </label>
                                            </div>
                                        </div>
                                    </section>
                                    <section>
                                        <div class="row">
                                            <div class="col-md-1">
                                            </div>
                                            <div class="col-md-2">
                                                @Html.LabelRequiredFor(model => model.ProductID, htmlAttributes: new { @class = "control-label" })
                                            </div>
                                            <div class="col-md-8">
                                                <div>
                                                    <label class="input-group">
                                                        <input type="text" class="form-control" id="txtprodsearch" onkeyup="SearchProduct()" placeholder="Search for Product" />
                                                        <span class="input-group-addon">
                                                            <span class="glyphicon glyphicon-search"></span>
                                                        </span>
                                                    </label>
                                                </div>
                                                <div class="box-scroll" id="chkBoxProduct">
                                                </div>
                                                @Html.ValidationMessageFor(model => model.ProductID, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </section>
                                </fieldset>
                                <fieldset>
                                    <div class="form-group">
                                        <div class="col-md-7">
                                            <input type="submit" value="Save" style="width:80px; margin:0px 20px 20px 0px" class="btn btn-primary pull-right btn-sm" />
                                        </div>
                                    </div>
                                </fieldset>
                                <fieldset>
                                    <section>
                                        <div id="divtable" class="col-md-12" style="overflow:auto;height:500px">
                                            <div class="col-md-1"></div>
                                            <div class="col-md-10">
                                                <div class="widget-body no-padding">
                                                    <br />
                                                    <table class="table table-striped table-bordered table-hover" id="table_basic">
                                                        <thead>
                                                            <tr>
                                                                <th hidden="hidden"></th>
                                                                <th style="width:30%; text-align:center">
                                                                    Product Name
                                                                </th>
                                                                <th style="width:10%">
                                                                    Action
                                                                </th>
                                                            </tr>
                                                        </thead>

                                                        <tbody>
                                                            @{
                                                                int i = 0;
                                                                foreach (var item in Model.ProductComboList)
                                                                {
                                                                    <tr>
                                                                        <td hidden="hidden">
                                                                            @Html.EditorFor(modelItem => item.ProductComboLinkID, new { htmlAttributes = new { @id = "ProductComboLinkID_" + i, @class = "form-control", @readonly = "readonly" } })
                                                                        </td>
                                                                        <td style="padding-left:3%">
                                                                            @Html.DisplayFor(modelItem => item.ProductName, new { htmlAttributes = new { @id = "ProductName_" + i, @class = "form-control" } })
                                                                        </td>
                                                                        <td>
                                                                            <button value="@item.ProductComboLinkID" onclick="DeleteComboLinkByID(value)" class="btn btn-danger btn-sm">Delete</button>
                                                                        </td>
                                                                    </tr>

                                                                    i++;
                                                                }
                                                            }
                                                        </tbody>

                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                    </section>
                                </fieldset>

                                                                }
                        </div>
                    </div>
                </div>
            </article>
        </div>
    </section>
</div>

@section pagespecific {
    <script type="text/javascript">
        $(document).ready(function () {
            var ProductGroupID = document.getElementById('ProductGroupID').value;
            GetProductDeptList(ProductGroupID)
        });
        function GetProductDeptList(ProductGroupID) {
            $.ajax({
                "url": baseURL + "ProductCombo/GetProductDeptList?ProductGroupID=" + ProductGroupID,
                "type": "GET",
                "dataType": "json",
                success: function (data) {
                    var output = '<option value="0"> Select Product Dept </option>';
                    $.each(data, function (key, entry) {
                        output += '<option value=' + entry.ProductDeptID + '>' + entry.ProductDeptName + '</option>';
                    })
                    $("#ddlDept").html(output);
                },
                error: function (err) {
                    alert(err);
                }
            });
        }
        function SearchProduct() {
            // Declare variables
            var input, filter, ul, li, a, i, txtValue;
            input = document.getElementById('txtprodsearch');
            filter = input.value.toUpperCase();
            ul = document.getElementById("chkBoxProduct");
            li = ul.getElementsByTagName('label');

            // Loop through all list items, and hide those who don't match the search query
            for (i = 0; i < li.length; i++) {
                a = li[i].getElementsByTagName("input")[0];
                txtValue = li[i].textContent || li[i].innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    li[i].style.display = "";
                } else {
                    li[i].style.display = "none";
                }
            }
        }
        function GetProductList(ProductDeptID) {
            $.ajax({
                "url": baseURL + "ProductCombo/GetProductList?ProductDeptID=" + ProductDeptID,
                "type": "GET",
                "dataType": "json",
                success: function (data) {
                    var output = '';
                    $.each(data, function (key, entry) {
                        output += '<label class="container-box" style="padding-left:35px;margin-left:4px; margin-top:2px"><input id="chkProductID_' + entry.ProductID + '" name="product_selected" type="checkbox" value="' + entry.ProductID + '" /><span class="checkmark"></span>' + entry.ProductName + '</label><br />'
                    })

                    $("#chkBoxProduct").html(output);
                },
                error: function (err) {
                    alert(err);
                }
            });
        }
        function DeleteComboLinkByID(id) {
            $.ajax({
                type: "GET",
                url: baseURL + "ProductCombo/DeleteComboLinkByID/" + id,
                success: function (data) {
                    if (data == "1") {
                        location.reload(true);
                    }
                    else {
                        alert("Failed Delete Data");
                    }

                },
            });
        }
    </script>
}